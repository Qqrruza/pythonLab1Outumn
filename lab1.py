# –ª–∞–±–∞ 1
# 1) —Ñ–ª–∞–≥ —Ñ—Ä–∞–Ω—Ü–∏–∏
# 2) —Å–¥–µ–ª–∞—Ç—å —É–∑–æ—Ä —à–∞—Ö–º–∞—Ç–Ω—ã–π
# 3) —Å–≥–µ–Ω–µ–Ω—Ä–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ä–∞–±–æ–ª—ã
# 4) –≤—ã–≤–µ—Å—Ç–∏ –¥–∏–∞–≥—Ä–∞–º–º—É –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∏—Å–µ–ª –±–æ–ª—å—à–µ –∏ –º–µ–Ω—å—à–µ –Ω—É–ª—è
#
# –¥–æ–ø. –∑–∞–¥–∞–Ω–∏–µ: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑ 2-3 –∫–∞–¥—Ä–æ–≤
import os
import math
import time

def clear_console():
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏"""
    os.system('cls' if os.name == 'nt' else 'clear')

def paint_france(hight, width_column):
    blue = f"\u001b[44m \u001b[0m"
    white = f"\u001b[47m \u001b[0m"
    red = f"\u001b[41m \u001b[0m"
    for line in range(hight):
        print(blue * width_column + white * width_column + red * width_column, sep="")


def print_chess(square_size):
    black = f"\u001b[40m \u001b[0m"
    white = f"\u001b[47m \u001b[0m"
    for line1 in range(square_size // 2):
        print(black * square_size + white * square_size + black * square_size)
    for line2 in range(square_size // 2):
        print(white * square_size + black * square_size + white * square_size)
    for line3 in range(square_size // 2):
        print(black * square_size + white * square_size + black * square_size)


def print_function_graph():

    size = 15
    graph = [[" " for _ in range(size)] for _ in range(size)]

    for x in range(size):
        y = int(x**2 / 4)
        if y < size:
            graph[size - 1 - y][x] = "*"

    for i in range(size):
        graph[size - 1][i] = "-"
        graph[i][0] = "|"

    graph[size - 1][0] = "+"

    for row in graph:
        print("".join(row))

def analyze_sequence():
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª –∏–∑ —Ñ–∞–π–ª–∞ sequence.txt"""
    print("\n=== –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò ===")
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∂–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    current_dir = os.getcwd()
    print(f"–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {current_dir}")
    
    # –ü–æ–∫–∞–∂–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    files = os.listdir('.')
    print(f"–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ: {[f for f in files if f.endswith('.txt') or f.endswith('.py')]}")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    possible_filenames = ['sequence.txt', 'Sequence.txt', 'SEQUENCE.txt']
    file_found = None
    
    for filename in possible_filenames:
        if os.path.exists(filename):
            file_found = filename
            break
    
    if not file_found:
        print("‚ùå –§–∞–π–ª sequence.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å–ª–µ–¥—É—é—â–µ–º:")
        print("1. –§–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        print("2. –ò–º—è —Ñ–∞–π–ª–∞ —Ç–æ—á–Ω–æ 'sequence.txt'")
        print("3. –§–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'sequence.txt.txt')")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_found}")
    
    try:
        with open(file_found, 'r', encoding='utf-8') as file:
            numbers = []
            line_count = 0
            for line in file:
                line_count += 1
                line = line.strip()
                if line:
                    try:
                        numbers.append(float(line))
                    except ValueError:
                        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ {line_count}: '{line}'")
            
        if not numbers:
            print("–§–∞–π–ª sequence.txt –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —á–∏—Å–µ–ª")
            return
            
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(numbers)} —á–∏—Å–µ–ª –∏–∑ {line_count} —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return
    
    # –ü–æ–¥—Å—á–µ—Ç —á–∏—Å–µ–ª
    less_than_zero = len([x for x in numbers if x < 0])
    greater_than_zero = len([x for x in numbers if x > 0])
    equal_to_zero = len([x for x in numbers if x == 0])
    total = len(numbers)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print(f"–í—Å–µ–≥–æ —á–∏—Å–µ–ª: {total}")
    print(f"–ú–µ–Ω—å—à–µ 0: {less_than_zero} ({less_than_zero/total*100:.1f}%)")
    print(f"–ë–æ–ª—å—à–µ 0: {greater_than_zero} ({greater_than_zero/total*100:.1f}%)")
    print(f"–†–∞–≤–Ω–æ 0: {equal_to_zero} ({equal_to_zero/total*100:.1f}%)")
    
    # –î–∏–∞–≥—Ä–∞–º–º–∞
    print("\nüìà –î–ò–ê–ì–†–ê–ú–ú–ê:")
    max_width = 40
    
    less_width = int((less_than_zero / total) * max_width)
    greater_width = int((greater_than_zero / total) * max_width)
    zero_width = int((equal_to_zero / total) * max_width)
    
    print("–ú–µ–Ω—å—à–µ 0:  " + '‚ñà' * max(1, less_width) + f" ({less_than_zero})")
    print("–ë–æ–ª—å—à–µ 0: " + '‚ñà' * max(1, greater_width) + f" ({greater_than_zero})")
    print("–†–∞–≤–Ω–æ 0:   " + '‚ñà' * max(1, zero_width) + f" ({equal_to_zero})")


if __name__ == "__main__":
    paint_france(7, 20)
    print("\n\n")
    print_chess(11)
    print_function_graph()
    analyze_sequence()
